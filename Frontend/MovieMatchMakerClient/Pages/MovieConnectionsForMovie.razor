@page "/movieconnectionsformovie/{Title}/{ReleaseYear:int}"

@using MovieMatchMakerLib.Client;
@using MovieMatchMakerLib.Model;

@inject IMovieConnectionsClient MovieConnectionsClient
@inject ILogger<MovieConnectionsForMovie> Logger

@*<p>Movie: @Title @ReleaseYear</p>*@

<PageTitle>Connected Movies: @Title (@ReleaseYear)</PageTitle>

@if (_movieConnections is null)
{
    <div>Loading movie connections for @Title (@ReleaseYear)...</div>
}
else
{
    <MudDataGrid @ref="_dataGrid"
                 T="MovieConnection"
                 Items="@_movieConnections"
                 Dense="true"
                 Striped="true"
                 Bordered="true"
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 RowsPerPage="15"
                 QuickFilter="@_quickFilter">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Connected Movies: @Title (@ReleaseYear)</MudText>
            <MudLink Href="@MainMovie.TmdbLink" Target="_blank">
                <MudImage Src="@MainMovie.PosterImagePath" Alt="@($"Poster image for {Title}")" ObjectFit="ObjectFit.ScaleDown"/>
            </MudLink>
            <MudButton Href="@($"movieconnectionsgraphformovie/{Title}/{ReleaseYear}")"
                       Variant="Variant.Text"
                       Size="Size.Large"
                       Color="Color.Primary">
                Graph
            </MudButton>
            <MudSpacer />           
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>

        <Columns>
            @*<PropertyColumn Property="mc => mc.SourceMovie.DisplayId" Title="Movie" />*@
            <TemplateColumn Title="Connected Movie">
                <CellTemplate>
                    <MudLink Href="@GetConnectedMovie(context.Item).TmdbLink" Target="_blank">@GetConnectedMovie(context.Item).DisplayId</MudLink>                    
                </CellTemplate>
            </TemplateColumn>
            @* <PropertyColumn Property="mc => mc.TargetMovie.DisplayId" Title="Connected Movie" /> *@
            <PropertyColumn Property="mc => mc.ConnectedRoles.Count" Title="Connected Roles (#)" />
            <TemplateColumn Sortable="false" Filterable="false">
                <CellTemplate>
                    <DetailsButton Href="@($"movieconnectiondetails/{@MainMovie.Title}/{@MainMovie.ReleaseYear}/{@GetConnectedMovie(context.Item).Title}/{@GetConnectedMovie(context.Item).ReleaseYear}")">
                        Connection
                    </DetailsButton>               
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="MovieConnection" PageSizeOptions="@_pageSizeOptions" />
        </PagerContent>

    </MudDataGrid>
}

@code {

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public int ReleaseYear { get; set; }

    public Movie MainMovie { get; set; }

    private MudDataGrid<MovieConnection>? _dataGrid;

    private MovieConnection.List _movieConnections;    

    private string _searchString = "";
    private readonly int[] _pageSizeOptions = { 10, 15, 25, 50, 100 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_dataGrid is not null)
        {
            await _dataGrid.SetSortAsync(nameof(MovieConnection.ConnectedRoles.Count), SortDirection.Descending, mc => mc.ConnectedRoles.Count);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _movieConnections = await MovieConnectionsClient.GetMovieConnectionsForMovie(Title, ReleaseYear);
        if (_movieConnections.Count > 0)
        {         
            if (_movieConnections.First().SourceMovie.Title == Title)
            {
                MainMovie = _movieConnections.First().SourceMovie;
            }
            else if (_movieConnections.First().TargetMovie.Title == Title)
            {
                MainMovie = _movieConnections.First().TargetMovie;
            }
        }
    }

    protected Movie GetConnectedMovie(MovieConnection connection)
    {
        Movie otherMovie = null;
        if (connection is not null)
        {
            if (connection.SourceMovie.Title == Title)
            {
                otherMovie = connection.TargetMovie;
            }
            else if (connection.TargetMovie.Title == Title)
            {
                otherMovie = connection.SourceMovie;
            }
        }
        return otherMovie;
    }

    private Func<MovieConnection, bool> _quickFilter => mc =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (mc.SourceMovie.DisplayId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (mc.TargetMovie.DisplayId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        var crossColumnValues = $"{mc.SourceMovie.DisplayId} {mc.TargetMovie.DisplayId} {mc.ConnectedRoles.Count.ToString()}";
        if (crossColumnValues.Contains(_searchString))
            return true;

        return false;
    };
}