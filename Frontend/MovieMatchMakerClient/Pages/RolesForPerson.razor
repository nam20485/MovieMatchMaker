@page "/rolesforperson/{FullName}"
@page "/rolesforperson/{PersonId:int}"

@using MovieMatchMakerLib.Client;
@using MovieMatchMakerLib.Model;

@inject IMovieConnectionsClient MovieConnectionsClient

<PageTitle>Roles</PageTitle>

@if (_roles is null)
{
    <div>Loading roles...</div>
}
else
{
    <MudDataGrid @ref="_dataGrid"
                    T="Role"
                    Items="@_roles"
                    Dense="true"
                    Striped="true"
                    Bordered="true"
                    SortMode="SortMode.Multiple"
                    Filterable="true"
                    RowsPerPage="15"
                    QuickFilter="@_quickFilter">

        <ToolBarContent>
            <MudText Typo="Typo.h6">@GetName().FullName</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>

        <Columns>
            <PropertyColumn Title="Movie" Property="r => r.Movie.Title" />
            <PropertyColumn Title="Released" Property="r => r.Movie.ReleaseYear" />
            <PropertyColumn Title="Role" Property="r => r.Job" />
            <TemplateColumn Filterable="false" Sortable="false" CellStyle="width: 50px">
                <CellTemplate>
                    <DetailsButton Href="@($"movieconnectionsformovie/{context.Item.Movie.Title}/{context.Item.Movie.ReleaseYear}")">
                        Connections
                    </DetailsButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Role" PageSizeOptions="@_pageSizeOptions" />
        </PagerContent>

    </MudDataGrid>
}


@code {

    [Parameter]
    public int PersonId { get; set; }

    [Parameter]
    public string FullName { get; set; }

    private Name GetName()
    {
        if (!string.IsNullOrWhiteSpace(FullName))
        {
            return new Name(FullName);
        }
        else
        {
            return _movieConnections.FindPersonName(PersonId);
        }
    }

    private Role.HashSet _roles;

    private MudDataGrid<Role>? _dataGrid;

    private MovieConnection.List _movieConnections;

    private string _searchString = "";
    private readonly int[] _pageSizeOptions = { 10, 15, 25, 50, 100 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_dataGrid is not null)
        {
            await _dataGrid.SetSortAsync(nameof(Role.Movie.Title), SortDirection.Ascending, r => r.Movie.Title);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _movieConnections = await MovieConnectionsClient.GetAllMovieConnections();
        if (_movieConnections is not null)
        {
            if (!string.IsNullOrWhiteSpace(FullName))
            {
                _roles = _movieConnections.GetRolesForPerson(new Name(FullName));
            }
            else
            {
                _roles = _movieConnections.GetRolesForPerson(PersonId);
            }
        }      
    }

    private Func<Role, bool> _quickFilter => r =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (r.Movie.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (r.Movie.ReleaseYear.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (r.Job.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        var crossColumnValues = $"{r.Movie.Title} {r.Movie.ReleaseYear} {r.Job}";       
        if (crossColumnValues.Contains(_searchString))
            return true;

        return false;
    };
}
